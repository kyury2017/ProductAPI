Тестовое задание для соискателя вакансии 
«удаленный C# / ASP.NET разработчик»

Напишите SQL-скрипт, который будет выполнять следующие действия:
Создание самой БД с именем TestDb
В БД TestDb создание таблицы для сущностей «Изделия» с именем Product со следующими полями:
ID – уникальное обозначение изделия, тип данных – Guid, поле обязательное для заполнения (первичный ключ);
Name – наименование изделия, тип данных - строка 255 символов, поле обязательное для заполнения;
Description – описание изделия, тип - строка с максимально возможным кол-вом символов, поле НЕ обязательное для заполнения.

Необходимо обеспечить контроль уникальности значения поля Name.

Необходимо создать некластеризованный индекс для поля Name с разрешенной блокировкой страниц и строк.

В БД TestDb создание таблицы для сущностей «Версия изделия» с именем ProductVersion со следующими полями:
ID – уникальное обозначение версии изделия, тип данных – Guid, поле обязательное для заполнения (первичный ключ);
ProductID – уникальное обозначение изделия к которому относится версия (ссылка на изделие), тип данных – Guid, поле обязательное для заполнения;
Name – наименование версии изделия, тип данных - строка 255 символов, поле обязательное для заполнения;
Description – описание версии изделия, тип - строка с максимально возможным кол-вом символов, поле НЕ обязательное для заполнения; 
CreatingDate – дата создания версии изделия, тип – дата, поле обязательное для заполнения, умолчаемое значение – текущая дата и время;
Width – габаритная ширина изделия в миллиметрах, тип – вещественное положительное число, поле обязательное для заполнения;
Height – габаритная высота изделия в миллиметрах, тип – вещественное положительное число, поле обязательное для заполнения;
Length – габаритная длина изделия в миллиметрах, тип – вещественное положительное число, поле обязательное для заполнения.

Необходимо создать некластеризованный индекс для полей Name, CreatingDate, Width, Height и Length с разрешенной блокировкой страниц и строк (для каждого поля отдельный индекс).

Таблица ProductVersion связана вторичным ключом с таблицей Product (полями ProductID и ID соответственно). При удалении записи из таблицы Product должны удаляться все связанные с ней записи из таблицы ProductVersion.

В БД TestDb создание таблицы для сущностей «Журнал событий» с именем EventLog со следующими полями:
ID – уникальное обозначение записи журнала событий, тип данных – Guid, поле обязательное для заполнения (первичный ключ);
EventDate – дата совершения события зафиксированного текущей записью, тип – дата, поле обязательное для заполнения, умолчаемое значение – текущая дата и время;
Description – описание версии изделия, тип - строка с максимально возможным кол-вом символов, поле НЕ обязательное для заполнения.

Необходимо создать некластеризованный индекс для поля EventDate с разрешенной блокировкой страниц и строк.

Создание триггера в таблицах Product и ProductVersion, обеспечивающего фиксирование событий по созданию/редактирования/удалению изделия/версии изделия в журнал событий (таблица EventLog).

Создание в БД TestDb хранимой функции поиска версий изделия по следующим параметрам:
наименование изделия (вхождение указанного значения как подстроки в строку наименования изделия);
наименование версии изделия (вхождение указанного значения как подстроки в строку наименования версии изделия);
минимальный габаритный объем изделия;
максимальный габаритный объем изделия. 

Функция должна возвращать данные в табличном виде со следующими колонками:
ID версии изделия;
наименование изделия;
наименование версии изделия;
габаритная ширина изделия;
габаритная длинна изделия;
габаритная высота изделия.

Заполнение таблицы Product и ProductVersion тестовыми данными

Реализуйте REST Web API сервис (ASP.NET Core) для возможности управления данными в БД в таблице Product. В сервисе должны присутствовать методы, реализующие:
Получение списка изделий по переданному фильтру (по наименованию изделия). 
Добавление нового изделия
Редактирование существующего изделия
Удаление существующего изделия по указанному идентификатору изделия

Необходимо продемонстрировать инжектирование сервисов в контроллеры и обработку исключений. Доступ к БД осуществлять посредством использования EntityFramework.